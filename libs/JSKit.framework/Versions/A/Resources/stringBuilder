#!/usr/bin/env python

import os
import sys

import re

import shutil
from subprocess import call

if len(sys.argv) <= 1:
	print "No project name supplied..."
	sys.exit()

class Constants(object):
	def __init__(self):
		self.project = sys.argv[1]
		self.projectName = self.project + ".xcodeproj"

		self.dirs = DirValues()
		self.factory = FactoryValues(self.project, self.dirs.strings)
		
		self.localizable = "Localizable.strings"
		self.gitIgnore = ".gitignore"

class DirValues(object):
	def __init__(self):
		self.values = os.path.join("res", "values")
		self.localization = os.path.join("res", "localization")
		self.strings = os.path.join(self.values, "strings")
		self.html = "localizeResults"

class FactoryValues(object):
	def __init__(self, project, stringsDir):
		self.categoryName = "{0}LocalizationReader".format(project)
		name = "NSString+{0}.".format(self.categoryName)

		self.h = name + "h"
		self.m = name + "m"


		self.hPath = os.path.join(stringsDir, self.h)
		self.mPath = os.path.join(stringsDir, self.m)
		
constants = Constants()

LOCALIZED_DIR_REGEX = re.compile(r"((.*?)([\w]{2}[.]lproj)(.*))")

def buildPath(path, fresh = False):
	if fresh:
		if os.path.exists(path):
			print "Recreating path..."
			shutil.rmtree(path)

	components = path.split("/")
	currentPath = ""

	for segment in components:
		currentPath = os.path.join(currentPath, segment)
		path = os.path.join(os.getcwd(), currentPath)

		if not os.path.exists(path):
			if not fresh:
				print "building path..."
			os.makedirs(path)

def writeLine(f, text, addLine = False, tabs = 0):
	text = text + "\n"
	if addLine:
		text = text + "\n"

	for i in range(0, tabs):
		text = "\t" + text

	f.write(text)

def newLine(f):
	f.write("\n")

def appendAutoGenerate(f):
	writeLine(f, "/* AUTO-GENERATED FILE!!! MODIFICATIONS WILL BE OVERWRITTEN */", True)

class LanguageParser(object):
	def __init__(self):
		self.languages = []
		languages = self.getSupportedLanguagesList()

		self.buildResStruct(languages)
		self.addToPCH()
		self.readValues(languages)
		self.writeLocalization()

		self.createFactory()

	def languageDirParser(self, match):
		return match.group(3)

	def getSupportedLanguagesList(self):
		print "fetching supported languages..."

		path = os.path.join(constants.projectName, "project.pbxproj")
		name = os.path.join("lproj", "InfoPlist.strings")

		supportedLanguages = []

		with open(path) as f:
			for line in f:
				if name in line.rstrip():
					fileName = LOCALIZED_DIR_REGEX.sub(self.languageDirParser, line).rstrip()

					if not any((fileName == currentName) for currentName in supportedLanguages):
						supportedLanguages.append(fileName)

		return supportedLanguages

	def buildResStruct(self, languages):
		for language in languages:
			path = os.path.join(constants.dirs.strings, language)
			buildPath(path)

			path = os.path.join(path, "strings.h")
			call(["touch", path])

	def addToPCH(self):
		for root, dirs, files in os.walk(os.getcwd()):
			for f in files:
				path = os.path.join(root, f)

				if any((item in path) for item in [ "build", "DerivedData" ]): 
					continue

				fileName = "{0}-Prefix.pch".format(constants.project)
				if fileName in path:
					alreadyAdded = False

					existingLines = []

					with open(path) as f:
						for line in f:
							existingLines.append(line.rstrip())

							if constants.factory.h in line:
								alreadyAdded = True
								break

					if not alreadyAdded:
						with open(path, "w") as f:
							for line in existingLines:
								writeLine(f, line)

							newLine(f)
							writeLine(f, "#import \"{0}\"".format(constants.factory.h))

	def readValues(self, supportedLanguages):
		for language in supportedLanguages:
			path = os.path.join(constants.dirs.strings, language, "strings.h")
			languageItem = LanguageItem(language, path)
			
			self.languages.append(languageItem)

		english = self.getLanguage("en")
		english.updateValues()

		for language in self.languages:
			language.updateValues(english)

	def writeLocalization(self):
		for language in self.languages:
			language.writeToDisk()

	def createFactory(self):
		self.writeFactoryInterface();
		self.writeFactoryImplementation()

	def writeFactoryInterface(self):
		with open(constants.factory.hPath, "w+") as f:
			appendAutoGenerate(f)

			writeLine(f, "#import <Foundation/Foundation.h>", True)
			writeLine(f, "@interface NSString ({0})".format(constants.factory.categoryName), True)

			english = self.getLanguage("en")
			for key in english.getSortedKeys():
				writeLine(f, "+ (NSString *){0};".format(key).replace("\"", ""))

			newLine(f)
			writeLine(f, "@end")

	def writeFactoryImplementation(self):
		with open(constants.factory.mPath, "w+") as f:
			appendAutoGenerate(f)

			writeLine(f, "#import \"NSString+{0}.h\"".format(constants.factory.categoryName), True)
			writeLine(f, "@implementation NSString ({0})".format(constants.factory.categoryName), True)

			english = self.getLanguage("en")
			for key in english.getSortedKeys():
				value = english.values[key].value

				writeLine(f, "+ (NSString *){0}".format(key).replace("\"", ""))
				writeLine(f, "{")
				writeLine(f, "\treturn NSLocalizedString(@{0}, nil);".format(value))
				writeLine(f, "}", True)

			writeLine(f, "@end")

	def getLanguage(self, value):
		for item in self.languages:
			if value in item.itemType:
				return item

		return None

	def printLanguages(self):
		print self.languages

class LanguageItem(object):
	def __init__(self, itemType, path):
		self.itemType = itemType

		self.values = {}
		self.parseFile(path)

	def parseFile(self, filePath):
		with open(filePath) as f:
			for line in f:
				line = line.rstrip()

				if " = " in line:
					components = line.split(" = ")

					key = components[0]
					value = components[1]
					self.values[key] = LanguageValue(key, value)

	def updateValues(self, languageItem = None):
		if languageItem == self:
			return

		if languageItem == None:
			for key in self.values.keys():
				item = self.values[key]
				item.key = item.value
		else:
			for key in languageItem.values.keys():
				languageValue = languageItem.values[key]

				try:
					item = self.values[key]
					item.key = languageValue.key
				except KeyError:
					pass

	def writeToDisk(self):
		path = os.path.join(constants.dirs.localization, self.itemType)
		buildPath(path)

		path = os.path.join(path, constants.localizable)

		if os.path.exists(path):
			os.remove(path)

		with open(path, "w+") as f:
			appendAutoGenerate(f)

			for key in self.values.keys():
				item = self.values[key]

				text = "{0} = {1};\n".format(item.key, item.value)
				writeLine(f, text)

	def getSortedKeys(self):
		return sorted(self.values.keys())

	def hasKey(self, key):
		return any((key == val) for val in self.values.keys())

	def __repr__(self):
		return str(self)

	def __str__(self):
		return "LanguageItem: {0}".format(self.itemType)

class LanguageValue(object):
	def __init__(self, key = "", value = ""):
		self.key = key.replace(";", "")
		self.value = value.replace(";", "")

	def __repr__(self):
		return str(self)

	def __str__(self):
		return "LanguageValue: {0} : {1}".format(self.key, self.value)

class HTMLBuilder(object):
	def __init__(self, languages):
		self.languages = languages
		self.results = []

		self.buildHTML()

	def buildHTML(self):
		for language in self.languages:
			for other in self.languages:
				if language == other:
					continue

				self.compareLanguages(language, other)

		self.writeHTMLFiles()

	def compareLanguages(self, l1, l2):
		item = HTMLItem(l1.itemType)

		for k1, i1 in l2.values.items():
			if l1.hasKey(k1):
				continue

			item.addItem(k1, i1)
		
		if item.hasContent():
			self.results.append(item)

	def writeHTMLFiles(self):
		if len(self.results) == 0:
			print "No missing localization values..."
		else:
			print "Missing localizations. Building report..."

		buildPath(constants.dirs.html, fresh = True)

		for htmlItem in self.results:
			path = os.path.join(constants.dirs.html, "{0}.html".format(htmlItem.title))

			with open(path, "w+") as f:
				writeLine(f, "<h1>{0}</h1>".format(htmlItem.title))
				writeLine(f, "<table border='1' cellpadding='10'>")

				header = [ "key", "missing text" ]
				self.writeHeader(f, header)

				for key, value in htmlItem.missing.items():
					self.addLine(f, key, value)

				writeLine(f, "</table>")

		self.addToGitIgnore()

	def writeHeader(self, f, headerValues):
		writeLine(f, "<tr>", tabs = 1)

		for header in headerValues:
			writeLine(f, "<th>{0}</th>".format(header).replace("\"", ""), tabs = 2)

		writeLine(f, "</tr>", tabs = 1)
		
	def addLine(self, f, key, languageValue):
		writeLine(f, "<tr>", tabs = 1)
		self.addCell(f, key)
		self.addCell(f, languageValue.key)
		writeLine(f, "</tr>", tabs = 1)

	def addCell(self, f, text):
		writeLine(f, "<td>{0}</td>".format(text).replace("\"", ""), tabs = 2)

	def addToGitIgnore(self):
		if not os.path.exists(".git"):
			return
		
		shouldAppend = True
		existingLines = []

		if os.path.exists(constants.gitIgnore):
			with open(constants.gitIgnore) as f:
				for line in f:
					existingLines.append(line)

					if constants.dirs.html in line:
						shouldAppend = False

		if shouldAppend:
			with open(constants.gitIgnore + ".temp", "w+") as f:
				for line in existingLines:
					f.write(line)

				newLine(f)
				writeLine(f, "# Localization reports")
				writeLine(f, constants.dirs.html + "/")
				
			os.rename(constants.gitIgnore + ".temp", constants.gitIgnore)

class HTMLItem(object):
	def __init__(self, title):
		self.title = title
		self.missing = {}

	def addItem(self, key, value):
		self.missing[key] = value

	def hasContent(self):
		return (True if len(self.missing) > 0 else False)

	def __repr__(self):
		return "HTMLItem: {0}".format(str(self))

	def __str__(self):
		return "{0}: {1}".format(self.title, self.missing)

HTMLBuilder(LanguageParser().languages)

